----------------------Quick sort ----------------------------
#include<stdio.h>
void display(int a[],int n);
int partition(int a[],int lb,int ub);
void quicksort(int x[],int left,int right);
 main()
{
int a[20],i,n;
printf("Enter how many elements would you like to enter:");
scanf("%d",&n);
for(i=0;i<n;i++)
scanf("%d",&a[i]);
printf("The array before sorting is:\n");
display(a,n);
quicksort(a,0,n-1);
printf("The array after sorting is:\n");
display(a,n);
}
int a[10],i,n;
void display(int a[],int n)
{
  for(i=0;i<n;i++)
	printf("%d\t",a[i]);
  printf("\n");
}

int partition(int a[],int lb,int ub)
{
	int pivot,start,end,temp;
	pivot=a[lb];
	start=lb+1;
	end=ub;
	do
	{
		while(a[start]<pivot && start <= ub)
			start++;
		while(a[end]>pivot && end > lb)
			end--;
		if(start<end)
		{
			temp=a[start];
			a[start]=a[end];
			a[end]=temp;
		}
	}while(start<=end);
	a[lb]=a[end];
	a[end]=pivot;
	return end;
}

void quicksort(int x[],int left,int right)
{
  int j;
  if(left<right)
   {
	j=partitio
n(x,left,right);
	quicksort(x,left,j-1);
	quicksort(x,j+1,right);
   }
}

--------------------------Prims algorithm -------------------
#include <stdio.h>

void prim(int n,int cost[10][10])
{
    int visited[10] = {0}, i, j, min_cost = 0, min, u, v,e;

    visited[1] = 1;

        for(e = 1; e <= n; e++)
            {
                for(i = 1,min=999; i <= n; i++)
                    for(j = 1;j <= n; j++)
                    {
                        if(cost[i][j]==0)
                            cost[i][j]=999;
                        if(cost[i][j]<min)
                            if(visited[i]!=0)
                        {
                            min= cost[i][j];
                            u=i;
                            v=j;
                        }
                    }


       if(visited[u]==0 || visited[v] == 0)
       {
        printf("Eage %d:(%d, %d) cost: %d\n",e, u, v, min);
        min_cost += min;
        visited[v]=1;
       }
       cost[u][v] = cost[v][u]=999;
    }

    printf("Minimum cost: %d\n", min_cost);
}

int main() {
    int i, j,n,cost[10][10];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix: \n");
    for(i = 1; i <= n; i++)
        {
            for(j = 1; j <= n; j++)
            {
                scanf("%d", &cost[i][j]);
            }
        }
    printf("MST edges: \n");
    prim(n,cost);

    return 0;
}

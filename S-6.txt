-------------------Primâ€™s algorithm---------------------
#include <stdio.h>

void prim(int n,int cost[10][10])
{
    int visited[10] = {0}, i, j, min_cost = 0, min, u, v,e;

    visited[1] = 1;

        for(e = 1; e <= n; e++)
            {
                for(i = 1,min=999; i <= n; i++)
                    for(j = 1;j <= n; j++)
                    {
                        if(cost[i][j]==0)
                            cost[i][j]=999;
                        if(cost[i][j]<min)
                            if(visited[i]!=0)
                        {
                            min= cost[i][j];
                            u=i;
                            v=j;
                        }
                    }


       if(visited[u]==0 || visited[v] == 0)
       {
        printf("Eage %d:(%d, %d) cost: %d\n",e, u, v, min);
        min_cost += min;
        visited[v]=1;
       }
       cost[u][v] = cost[v][u]=999;
    }

    printf("Minimum cost: %d\n", min_cost);
}

int main() {
    int i, j,n,cost[10][10];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix: \n");
    for(i = 1; i <= n; i++)
        {
            for(j = 1; j <= n; j++)
            {
                scanf("%d", &cost[i][j]);
            }
        }
    printf("MST edges: \n");
    prim(n,cost);

    return 0;
}

---------------------------Longest Common Subsequence--------------
#include <stdio.h>
#include <string.h>

// Macro to find maximum of two numbers
#define max(x,y) ((x) > (y) ? (x) : (y))

int result[200][200]; // 2D array to store the length of the longest common subsequence

char str1[200], str2[200]; // Strings to hold user input

int main() {
    printf("Input the first string: ");
    scanf("%s", str1);

    printf("\nInput the second string: ");
    scanf("%s", str2);

    int n = strlen(str1); // Length of the first string
    int m = strlen(str2); // Length of the second string

    // Loop to find the length of the longest common subsequence of the given strings
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                // If characters at current positions are the same, increment the count
                result[i][j] = result[i - 1][j - 1] + 1;
            } else {
                // If characters are different, choose the maximum length subsequence from previous results
                result[i][j] = max(result[i - 1][j], result[i][j - 1]);
            }
        }
    }

    // Display the length of the longest common subsequence of the given strings
    printf("\nLength of longest common subsequence of said strings: %d\n", result[n][m]);

    return 0;
}


------------------------BFS -------------------

#include<stdio.h>
#define MAXSIZE 20

struct queue
{
    int data[MAXSIZE];
    int front,rear;
};

void initq(struct queue *pq)
{
   pq->front=pq->rear = -1;
}
 void addq(struct queue *pq, int n)
{
    pq->data[++pq->rear]=n;

}
int removeq (struct queue *pq)
{
    return pq->data[++pq->front];
}
int isempty (struct queue *pq)
{
    return (pq->front==pq->rear);
}
int isfull(struct queue *pq)
{
    return (pq->rear==MAXSIZE-1);
}
void bfs(int m[10][10],int n)
{
    int i,j,v,w;
    int visited[20]={0};
    struct queue q;
    initq(&q);
    printf("The BFS traversal is:\n");
    v=1;
    visited[v]=1;
    addq(&q,v);
    while(!isempty(&q))
    {
        v=remove(&q);
        printf("v%d",v);
        for(w=1;w<=n;w++)
        {
            if((m[v][w]==1)&&(!visited[w]))
        {
            addq(&q,w);
            visited[w]=1;
        }
    }
    }
}

int main()
{
   int m[5][5]={{0,0,1,1,0},{0,0,1,0,1},{0,1,0,0,0},{0,0,0,0,1},{0,0,0,0,0}};
   bfs(m,5);
}


-----------------------TSP ------------------
#include <stdio.h>
#include <limits.h>
#define MAX 9999
int n = 4;
int distan[20][20] = {
   {0, 22, 26, 30},
   {30, 0, 45, 35},
   {25, 45, 0, 60},
   {30, 35, 40, 0}};
int DP[32][8];
int TSP(int mark, int position) {
   int completed_visit = (1 << n) - 1;
   if (mark == completed_visit) {
       return distan[position][0];
   }
   if (DP[mark][position] != -1) {
       return DP[mark][position];
   }
   int answer = MAX;
   for (int city = 0; city < n; city++) {
      if ((mark & (1 << city)) == 0) {
         int newAnswer = distan[position][city] + TSP(mark | (1 << city), city);
         answer = (answer < newAnswer) ? answer : newAnswer;
      }
   }
   return DP[mark][position] = answer;
}
int main() {
   for (int i = 0; i < (1 << n); i++) {
      for (int j = 0; j < n; j++) {
         DP[i][j] = -1;
      }
   }
   printf("Minimum Distance Travelled -> %d\n", TSP(1, 0));
   return 0;
}

----------------------------0/1 knaspak---------------
#include<stdio.h>
int max(int a, int b) { return (a > b)? a : b; }
int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
   for (i = 0; i <= n; i++)
   {
       for (w = 0; w <= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] <= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
   return K[n][W];
}
int main()
{
    int i, n, val[20], wt[20], W;
    
    printf("Enter number of items:");
    scanf("%d", &n);
    
    printf("Enter value and weight of items:\n");
    for(i = 0;i < n; ++i){
     scanf("%d%d", &val[i], &wt[i]);
    }
 
    printf("Enter size of knapsack:");
    scanf("%d", &W);
    
    printf("%d", knapSack(W, wt, val, n));
    return 0;
}

--------------------------------DFS -----------------
#include <stdio.h>
#define MAX 100

int visited[MAX] = {0};
int adjacency_matrix[MAX][MAX];
int n;

void DFS(int vertex) {
    int i;
    visited[vertex] = 1;
    printf("%d ", vertex);

    for(i = 0; i < n; i++) {
        if(adjacency_matrix[vertex][i] && !visited[i]) {
            DFS(i);
        }
    }
}

int main() {
    int i, j, start_vertex;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix: \n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < n; j++) {
            scanf("%d", &adjacency_matrix[i][j]);
        }
    }

    printf("Enter the starting vertex: ");
    scanf("%d", &start_vertex);

    printf("DFS traversal: ");
    DFS(start_vertex);

    return 0;
}



-----------------------------Dijsktra ---------------

#include<stdio.h>
//#include<conio.h>
#define INFINITY 9999
#define MAX 10
 
void dijkstra(int G[MAX][MAX],int n,int startnode);
 
int main()
{
int G[MAX][MAX],i,j,n,u;
printf("Enter no. of vertices:");
scanf("%d",&n);
printf("\nEnter the adjacency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
printf("\nEnter the starting node:");
scanf("%d",&u);
dijkstra(G,n,u);
return 0;
}
 
void dijkstra(int G[MAX][MAX],int n,int startnode)
{
 
int cost[MAX][MAX],distance[MAX],pred[MAX];
int visited[MAX],count,mindistance,nextnode,i,j;
//pred[] stores the predecessor of each node
//count gives the number of nodes seen so far
//create the cost matrix
for(i=0;i<n;i++)
for(j=0;j<n;j++)
if(G[i][j]==0)
cost[i][j]=INFINITY;
else
cost[i][j]=G[i][j];
//initialize pred[],distance[] and visited[]
for(i=0;i<n;i++)
{
distance[i]=cost[startnode][i];
pred[i]=startnode;
visited[i]=0;
}
distance[startnode]=0;
visited[startnode]=1;
count=1;
while(count<n-1)
{
mindistance=INFINITY;
//nextnode gives the node at minimum distance
for(i=0;i<n;i++)
if(distance[i]<mindistance&&!visited[i])
{
mindistance=distance[i];
nextnode=i;
}
//check if a better path exists through nextnode 
visited[nextnode]=1;
for(i=0;i<n;i++)
if(!visited[i])
if(mindistance+cost[nextnode][i]<distance[i])
{
distance[i]=mindistance+cost[nextnode][i];
pred[i]=nextnode;
}
count++;
}
 
//print the path and distance of each node
for(i=0;i<n;i++)
if(i!=startnode)
{
printf("\nDistance of node%d=%d",i,distance[i]);
printf("\nPath=%d",i);
j=i;
do
{
j=pred[j];
printf("<-%d",j);
}while(j!=startnode);
}
}

--------------------------------------graph col ----------------

 /*First take input number of vertices and edges in graph G. Then input all the indexes of adjacency matrix of G whose value is 1. Now we will try to color each of the vertex. A next_color(k) function takes in index of the kth vertex which is to be colored. First we assign color1 to the kth vertex.Then we check whether it is connected to any of previous (k-1) vertices using backtracking. If connected then assign a color x[i]+1 where x[i] is the color of ith vertex that is connected with kth vertex.*/
 #include<stdio.h>
int G[50][50],x[50];  //G:adjacency matrix,x:colors
void next_color(int k){
   int i,j;
   x[k]=1;  //coloring vertex with color1
   for(i=0;i<k;i++){ //checking all k-1 vertices-backtracking
     if(G[i][k]!=0 && x[k]==x[i])  //if connected and has same color
       x[k]=x[i]+1;  //assign higher color than x[i]
   }
}

int main(){
  int n,e,i,j,k,l;
  printf("Enter no. of vertices : ");
  scanf("%d",&n);  //total vertices
  printf("Enter no. of edges : ");
  scanf("%d",&e);  //total edges
 
  for(i=0;i<n;i++)
    for(j=0;j<n;j++)
      G[i][j]=0;  //assign 0 to all index of adjacency matrix
     
  printf("Enter indexes where value is 1-->\n");
  for(i=0;i<e;i++){
    scanf("%d %d",&k,&l);
    G[k][l]=1;
    G[l][k]=1;
  }
 
  for(i=0;i<n;i++)
    next_color(i);  //coloring each vertex

  printf("Colors of vertices -->\n");
  for(i=0;i<n;i++)  //displaying color of each vertex
    printf("Vertex[%d] : %d\n",i+1,x[i]);

  return 0;
}


------------------------------Hemelton -----------
#include <stdio.h>
#define NODE 5
int graph[NODE][NODE] = {
   {0, 1, 0, 1, 0},
   {1, 0, 1, 1, 1},
   {0, 1, 0, 0, 1},
   {1, 1, 0, 0, 1},
   {0, 1, 1, 1, 0},
};
int path[NODE];
// Function to display the Hamiltonian cycle
void displayCycle() {
   printf("Cycle Found: ");
   for (int i = 0; i < NODE; i++)
      printf("%d ", path[i]);
   // Print the first vertex again
   printf("%d\n", path[0]);
}
// Function to check if adding vertex v to the path is valid
int isValid(int v, int k) {
   // If there is no edge between path[k-1] and v
   if (graph[path[k - 1]][v] == 0)
      return 0;
   // Check if vertex v is already taken in the path
   for (int i = 0; i < k; i++)
      if (path[i] == v)
         return 0;
   return 1;
}
// Function to find the Hamiltonian cycle
int cycleFound(int k) {
   // When all vertices are in the path
   if (k == NODE) {
      // Check if there is an edge between the last and first vertex
      if (graph[path[k - 1]][path[0]] == 1)
         return 1;
      else
         return 0;
   }
   // Try adding each vertex (except the starting point) to the path
   for (int v = 1; v < NODE; v++) {
      if (isValid(v, k)) {
         path[k] = v;
         if (cycleFound(k + 1) == 1)
            return 1;
         // Backtrack: Remove v from the path
         path[k] = -1;
      }
   }
   return 0;
}
// Function to find and display the Hamiltonian cycle
int hamiltonianCycle() {
   for (int i = 0; i < NODE; i++)
      path[i] = -1;
   // Set the first vertex as 0
   path[0] = 0;
   if (cycleFound(1) == 0) {
      printf("Solution does not exist\n");
      return 0;
   }
   displayCycle();
   return 1;
}
int main() {
   hamiltonianCycle();
   return 0;
}


--------------------------Heap sort --------------

#include<stdio.h>

void selectionsort(int a[],int n);
void display(int a[],int n);
int main()
{
    int a[10],i,n;
  printf("\n Enter the number of elements:");
  scanf("%d",&n);
  printf("\n Enter array elements:");
  for(i=0;i<n;i++)
    scanf("%d",&a[i]);
  printf("\n Sorted elements are:");
heapsort(a,n);
  display(a,n);
}
void display(int a[],int n)
{
    int i;
    for(i=0;i<n;i++)
     printf("\t%d",a[i]);
}

void heapsort(int a[], int n,int i)
{
    int largest=i;
int l=(2*i)+1;
int r=(2*i)+1;
while(l<=n && a[l]>a[largest])
{
largest=l;
}
while(r<=n && a[r]>a[largest])
{
largest=r;
}
if(largest!=i)
{
a[largest]=a[i];

 heapsort(a,n, largest);
}
}

    


----------------------Insertionn ------------------

#include<stdio.h>
int main()
{
 int i,j,n,x,a[10];
 printf("\n Enter the no of elements:");
 scanf("%d",&n);
 printf("\n Enter the unsorted data:");
    for(i=0;i<n;i++)
 scanf("%d",&a[i]);
 printf("\n Display the unsorted data:");
 for(i=0;i<n;i++)
   printf("%4d",a[i]);
/* 2 loop requred for comparision i for ul */
 for(i=1;i<n;i++)//for ul
  {
   x=a[i];//store 1st element from ul to x
   for(j=i-1;j>=0 && x<a[j];j--)//reuired for decreament 
	a[j+1]=a[j];
   a[j+1]=x;
  }
  printf("\n Display the sorted data:");
  for(i=0;i<n;i++)
     printf("%4d",a[i]);
  return 0;
}
/*
	       OUTPUT
 Enter the no of elements:4

 Enter the unsorted data:8
6
4
2

 Display the unsorted data:   8   6   4   2
 Display the sorted data:   2   4   6   8
*/


--------------------------knaspack by greddy ------------

#include<stdio.h>
int main()
{
     float weight[50],profit[50],ratio[50],Totalvalue,temp,capacity,amount;
     int n,i,j;
     printf("Enter the number of items :");
     scanf("%d",&n);   
    for (i = 0; i < n; i++)
    {
        printf("Enter Weight and Profit for item[%d] :\n",i);
        scanf("%f %f", &weight[i], &profit[i]);
    } 
    printf("Enter the capacity of knapsack :\n");
    scanf("%f",&capacity);
     
     for(i=0;i<n;i++)
         ratio[i]=profit[i]/weight[i];
         
    for (i = 0; i < n; i++) 
      for (j = i + 1; j < n; j++) 
         if (ratio[i] < ratio[j]) 
        {
            temp = ratio[j];
            ratio[j] = ratio[i];
            ratio[i] = temp;
 
            temp = weight[j];
            weight[j] = weight[i];
            weight[i] = temp;
 
            temp = profit[j];
            profit[j] = profit[i];
            profit[i] = temp;
         }
    
     printf("Knapsack problems using Greedy Algorithm:\n");
     for (i = 0; i < n; i++) 
     {
      if (weight[i] > capacity)
          break;
       else 
      {
          Totalvalue = Totalvalue + profit[i];
          capacity = capacity - weight[i];
       }
     } 
       if (i < n)
       Totalvalue = Totalvalue + (ratio[i]*capacity);
     printf("\nThe maximum value is :%f\n",Totalvalue);     
     return 0;
}

--------------------------Kruskal ---------------
#include <stdio.h>
#include <stdlib.h>

    int i, j, k, a, b, u, v, n, ne = 1;
    int min, mincost = 0, cost[9][9], parent[9];
    int find(int);
    int uni(int, int);
int main()
{
      printf("\n\tImplementation of Kruskal's Algorithm\n");
      printf("\nEnter the no. of vertices:");
      scanf("%d", &n);
      printf("\nEnter the cost adjacency matrix:\n");
      for (i = 1; i <= n; i++)
        {
        for (j = 1; j <= n; j++)
         {
          scanf("%d", &cost[i][j]);
          if (cost[i][j] == 0)
            cost[i][j] = 999;
        }
      }
      printf("The edges of Minimum Cost Spanning Tree are\n");
      while (ne < n) {
        for (i = 1, min = 999; i <= n; i++)
        {
          for (j = 1; j <= n; j++)
          {
            if (cost[i][j] < min)
             {
              min = cost[i][j];
              a = u = i;
              b = v = j;
            }
          }
        }
        u = find(u);
        v = find(v);
        if (uni(u, v)) {
          printf("%d edge (%d,%d) =%d\n", ne++, a, b, min);
          mincost += min;
        }
        cost[a][b] = cost[b][a] = 999;
      }
      printf("\n\tMinimum cost = %d\n", mincost);
      return 0;
    }
    int find(int i)
     {
      while (parent[i])
        i = parent[i];
      return i;
    }
    int uni(int i, int j)
     {
      if (i != j)
        {
        parent[j] = i;
        return 1;
       }
      return 0;
    }

-------------------------Longest common subsequence ------------

#include <stdio.h>
#include <string.h>

// Macro to find maximum of two numbers
#define max(x,y) ((x) > (y) ? (x) : (y))

int result[200][200]; // 2D array to store the length of the longest common subsequence

char str1[200], str2[200]; // Strings to hold user input

int main() {
    printf("Input the first string: ");
    scanf("%s", str1);

    printf("\nInput the second string: ");
    scanf("%s", str2);

    int n = strlen(str1); // Length of the first string
    int m = strlen(str2); // Length of the second string

    // Loop to find the length of the longest common subsequence of the given strings
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (str1[i - 1] == str2[j - 1]) {
                // If characters at current positions are the same, increment the count
                result[i][j] = result[i - 1][j - 1] + 1;
            } else {
                // If characters are different, choose the maximum length subsequence from previous results
                result[i][j] = max(result[i - 1][j], result[i][j - 1]);
            }
        }
    }

    // Display the length of the longest common subsequence of the given strings
    printf("\nLength of longest common subsequence of said strings: %d\n", result[n][m]);

    return 0;
}




------------------- Matrix chain ---------------

#include <stdio.h>
#include <string.h>
#define INT_MAX 999999
int mc[50][50];
int min(int a, int b){
   if(a < b)
      return a;
   else
      return b;
}
int DynamicProgramming(int c[], int i, int j){
   if (i == j) {
      return 0;
   }
   if (mc[i][j] != -1) {
      return
         mc[i][j];
   }
   mc[i][j] = INT_MAX;
   for (int k = i; k < j; k++) {
      mc[i][j] = min(mc[i][j], DynamicProgramming(c, i, k) + DynamicProgramming(c, k + 1, j) + c[i - 1] * c[k] * c[j]);
   }
   return mc[i][j];
}
int Matrix(int c[], int n){
   int i = 1, j = n - 1;
   return DynamicProgramming(c, i, j);
}
int main(){
   int arr[] = { 23, 26, 27, 20 };
   int n = sizeof(arr) / sizeof(arr[0]);
   memset(mc, -1, sizeof mc);
   printf("Minimum number of multiplications is: %d", Matrix(arr, n));
}








--------------------------Merge --------------

/* Program of sorting using merge sort through recursion*/
#include<stdio.h>
void merge( int a[10],int low, int mid, int high );
void merge_sort( int a[10],int low, int high );
void display(int a[10],int n);
int main()
{
    int n,a[10],i;
	printf("Enter the number of elements : ");
	scanf("%d",&n);
	printf("\n Enter array elements:");
        for(i=0;i<n;i++)
        scanf("%d",&a[i]);
	printf("Unsorted list is :\n");
	display(a,n);
	merge_sort( a,0, n-1);
	printf("\nSorted list is :\n");
	display(a,n);
	printf("\n");
	return 0;
}
void display(int a[10],int n)
{
    int i;
    for( i = 0 ; i<n ; i++)
	printf("%d\t", a[i]);
}
void merge(int a[10], int low, int mid, int high )
{
	int temp[10];
	int i = low;
	int j = mid +1 ;
	int k = low ;
	while( (i <= mid) && (j <=high) )
	{
		if(a[i] <= a[j])
			temp[k++] = a[i++] ;
		else
			temp[k++] = a[j++] ;
	}
	while( i <= mid )
		temp[k++]=a[i++];
	while( j <= high )
		temp[k++]=a[j++];
	for(i= low; i <= high ; i++)
		a[i]=temp[i];
}

void merge_sort( int a[10],int low, int high )
{
	int mid;
	if( low < high )
	{
		mid = (low+high)/2;
		merge_sort(a, low , mid );
		merge_sort(a, mid+1, high );
		merge(a, low, mid, high );
	}
}



----------------nqueen ---------

#include<stdio.h>
#include<math.h>
 
int board[20],count;
 
int main()
{
int n,i,j;
void queen(int row,int n);
 
printf(" - N Queens Problem Using Backtracking -");
printf("\n\nEnter number of Queens:");
scanf("%d",&n);
queen(1,n);
return 0;
}
 
//function for printing the solution
void print(int n)
{
int i,j;
printf("\n\nSolution %d:\n\n",++count);
 
for(i=1;i<=n;++i)
  printf("\t%d",i);
 
for(i=1;i<=n;++i)
{
  printf("\n\n%d",i);
  for(j=1;j<=n;++j) //for nxn board
  {
   if(board[i]==j)
    printf("\tQ"); //queen at i,j position
   else
    printf("\t-"); //empty slot
  }
}
}
 
/*funtion to check conflicts
If no conflict for desired postion returns 1 otherwise returns 0*/
int place(int row,int column)
{
int i;
for(i=1;i<=row-1;++i)
{
  //checking column and digonal conflicts
  if(board[i]==column)
   return 0;
  else
   if((board[i]-column)==(i-row))
    return 0;
}
 
return 1; //no conflicts
}
 
//function to check for proper positioning of queen
void queen(int row,int n)
{
int column;
for(column=1;column<=n;++column)
{
  if(place(row,column))
  {
   board[row]=column; //no conflicts so place queen
   if(row==n) //dead end
    print(n); //printing the board configuration
   else //try queen with next position
    queen(row+1,n);
  }
}
}

---------------------prims ------------

#include <stdio.h>

void prim(int n,int cost[10][10])
{
    int visited[10] = {0}, i, j, min_cost = 0, min, u, v,e;

    visited[1] = 1;

        for(e = 1; e <= n; e++)
            {
                for(i = 1,min=999; i <= n; i++)
                    for(j = 1;j <= n; j++)
                    {
                        if(cost[i][j]==0)
                            cost[i][j]=999;
                        if(cost[i][j]<min)
                            if(visited[i]!=0)
                        {
                            min= cost[i][j];
                            u=i;
                            v=j;
                        }
                    }


       if(visited[u]==0 || visited[v] == 0)
       {
        printf("Eage %d:(%d, %d) cost: %d\n",e, u, v, min);
        min_cost += min;
        visited[v]=1;
       }
       cost[u][v] = cost[v][u]=999;
    }

    printf("Minimum cost: %d\n", min_cost);
}

int main() {
    int i, j,n,cost[10][10];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix: \n");
    for(i = 1; i <= n; i++)
        {
            for(j = 1; j <= n; j++)
            {
                scanf("%d", &cost[i][j]);
            }
        }
    printf("MST edges: \n");
    prim(n,cost);

    return 0;
}

--------------------Quick ----------------

#include<stdio.h>
void display(int a[],int n);
int partition(int a[],int lb,int ub);
void quicksort(int x[],int left,int right);
 main()
{
int a[20],i,n;
printf("Enter how many elements would you like to enter:");
scanf("%d",&n);
for(i=0;i<n;i++)
scanf("%d",&a[i]);
printf("The array before sorting is:\n");
display(a,n);
quicksort(a,0,n-1);
printf("The array after sorting is:\n");
display(a,n);
}
int a[10],i,n;
void display(int a[],int n)
{
  for(i=0;i<n;i++)
	printf("%d\t",a[i]);
  printf("\n");
}

int partition(int a[],int lb,int ub)
{
	int pivot,start,end,temp;
	pivot=a[lb];
	start=lb+1;
	end=ub;
	do
	{
		while(a[start]<pivot && start <= ub)
			start++;
		while(a[end]>pivot && end > lb)
			end--;
		if(start<end)
		{
			temp=a[start];
			a[start]=a[end];
			a[end]=temp;
		}
	}while(start<=end);
	a[lb]=a[end];
	a[end]=pivot;
	return end;
}

void quicksort(int x[],int left,int right)
{
  int j;
  if(left<right)
   {
	j=partitio
n(x,left,right);
	quicksort(x,left,j-1);
	quicksort(x,j+1,right);
   }
}


------------------Selection ----------------

#include <stdio.h>
int main() {
   int arr[10]={6,12,0,18,11,99,55,45,34,2};
   int n=10;
   int i, j, position, swap;
   for (i = 0; i < (n - 1); i++) {
      position = i;
      for (j = i + 1; j < n; j++) {
         if (arr[position] > arr[j])
            position = j;
      }
      if (position != i) {
         swap = arr[i];
         arr[i] = arr[position];
         arr[position] = swap;
      }
   }
   for (i = 0; i < n; i++)
      printf("%d\t", arr[i]);
   return 0;
}




-------------------Subset --------------

#include <stdio.h>
#define SIZE 7
void displaySubset(int subSet[], int size) {
   for(int i = 0; i < size; i++) {
      printf("%d  ", subSet[i]);
   }
   printf("\n");
}
void subsetSum(int set[], int subSet[], int n, int subSize, int total, int nodeCount ,int sum) {
   if( total == sum) {
      //print the subset 
      displaySubset(subSet, subSize);  
      //for other subsets
      if (subSize != 0)
         subsetSum(set,subSet,n,subSize-2,total-set[nodeCount],nodeCount+1,sum);     
      return;
   }else {
      //find node along breadth 
      for( int i = nodeCount; i < n; i++ ) {     
         subSet[subSize] = set[i];
          //do for next node in depth
         subsetSum(set,subSet,n,subSize+1,total+set[i],i+1,sum);    
      }
   }
}
void findSubset(int set[], int size, int sum) {
   //create subset array to pass parameter of subsetSum
   int subSet[size];     
   subsetSum(set, subSet, size, 0, 0, 0, sum);
}
int main() {
   int weights[] = {1, 9, 7, 5, 18, 12, 20, 15};
   int size = SIZE;
   findSubset(weights, size, 35);
   return 0;
}


-----------------Topological -----------

#include <stdio.h>
#include<stdlib.h>
//#include<conio.h>
#define MAXSIZE 20
typedef struct
{
    int data[MAXSIZE];
    int top;
}STACK;
void init(STACK *ps)
{
  ps->top=-1;
}
int isempty(STACK *ps)
{
  return(ps->top==-1);
}
void push(STACK *ps, int n)
{
  ps->data[++ps->top]=n;
}
int pop(STACK *ps)
{
  return ps->data[ps->top--];
}

void topological_sort(int m[10][10],int n)
 {
    int i,j,v,w;
    int indeg[10];
    int visited[10]={0};
    printf("Enter the matrix:");
    for(i=0;i<n;i++)
        {
            for(j=0;j<n;j++)
            {
                scanf("%d",&m[i][j]);
            }
        }

    for(i=0;i<n;i++)
        {
        indeg[i]=0;
        for(j=0;j<n;j++)
        {
            if(i!=j)
            indeg[i] = indeg[i]+ m[j][i];
        }

        printf("Indegree of v%d=%d\t",i+1,indeg[i]);

 }
   printf("\nTopological sort: ");
    STACK s;
    init(&s);
    while(1)
    {
     for(v=0;v<n;v++)
         if((visited[v]==0)&&(indeg[v]==0))
         {
             visited[v]=1;
             push(&s,v);
             printf("v%d",v+1);
         }
     if(isempty(&s))
        break;
     v=pop(&s);
     for(w=0;w<n;w++)
         if(m[v][w]==1)
            indeg[w]=indeg[w]-1;
   }
}
int main()
{
    //int m[4][4]={{0,1,1,0},{0,0,1,1},{0,0,0,1},{0,0,0,0}};
    int m[10][10],n;
    printf("How many vertices :");
    scanf("%d",&n);
       topological_sort(m,n);

}
